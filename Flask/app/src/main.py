import datetimeimport jsonimport logging.handlersimport osimport socketimport uuidimport numpy as npfrom flask import Flask, request, g, jsonifyfrom flask_cors import CORSfrom sqlalchemy import create_enginefrom app.src.config import SQLManagerfrom app.src.dao.element import *from app.src.util.common import to_json, get_limit_offset, data_judge, new_to_jsonfrom app.src.services.element import *from app.src.peakRate import RSRPfrom app.src.throughput import Throughputbase_data_folder = os.environ.get('POWERGRID_IMAGE_BASE_DIR', ".")log_folder = os.path.join(base_data_folder, "log")if not os.path.exists(base_data_folder):    os.mkdir(base_data_folder)if not os.path.exists(log_folder):    os.mkdir(log_folder)def beijing(sec):    beijing_time = datetime.datetime.now() + datetime.timedelta(hours=8)    return beijing_time.timetuple()hostname = socket.gethostname()logger = logging.getLogger('app')logger.setLevel(logging.DEBUG)formatter = logging.Formatter('%(asctime)s [%(module)s] %(levelname)s %(message)s', '%Y-%m-%d %H:%M:%S')formatter.converter = beijingtime_rotating_handler = logging.handlers.TimedRotatingFileHandler(    os.path.join(log_folder, 'run-{}.log'.format(hostname)), when='MIDNIGHT', interval=1, backupCount=30,    encoding="utf8", delay=False)time_rotating_handler.setLevel(logging.DEBUG)# 此处配置数据库连接信息，按照数据库安装情况填写engine = create_engine('postgresql://postgres:root@localhost:5432/postgres', echo=True)db = engine.connect()app = Flask(__name__)CORS(app, supports_credentials=True)@app.route('/warning', methods=['GET', 'POST'])def warning():    db = SQLManager()    nongdu = db.get_one('select nongdu from nongdu order by id DESC ')    print(nongdu)    db.close()    return jsonify({'code': 200, 'data': nongdu})    # return nongdu@app.before_requestdef before_request():    g.requestId = str(uuid.uuid4().hex)@app.after_requestdef after_request(response):    logger.info(json.dumps({        "AccessLog": {            "status_code": response.status_code,            "method": request.method,            "ip": request.headers.get('X-Real-IP', request.remote_addr),            "url": request.url,            # "data": json.dumps(request.data),            "requestId": g.requestId        }    }, ensure_ascii=False))    return response@app.route('/', methods=['GET', 'POST'])def hello():    print('/')    print(request.form)    return "hello {}".format(g.requestId)# 场景查询@app.route('/scene/select', methods=['GET', 'POST'])def scene_select():    data = get_scene_data(db)    return jsonify({'code': 200, 'data': to_json(data)})# 元素查询@app.route('/element/select', methods=['GET', 'POST'])def element_select():    param = request.form    id = param.get('id')    element_type = param.get('element_type')    scene_id = param.get('scene_id')    serial_number = param.get('serial_number')    page = param.get("page")    limit = param.get("limit")    limit, offset = get_limit_offset(page, limit)    data, count = get_element_data(db, limit=limit, offset=offset, id=id, scene_id=scene_id, element_type=element_type,                                   serial_number=serial_number)    return jsonify({'code': 200, 'data': to_json(data), 'count': count})# 元素保存@app.route('/element/save', methods=['GET', 'POST'])def element_save():    param = request.form    name = param.get('name')    type = param.get('type')    lon = param.get('lon')    lat = param.get('lat')    scene_id = param.get('scene_id')    element_type = param.get('element_type')    parent_id = param.get('parent_id')    info = param.get('info')    element = Element(name=name, type=type, lon=lon, lat=lat, scene_id=scene_id,                      element_type=element_type, parent_id=parent_id, info=info)    if 'id' in param.keys():        element.id = param.get('id')        update_element_data(db, data=element)    else:        element.serial_number = create_serial_number(db, element)        element.id = str(uuid.uuid4().hex)        insert_element_data(db, data=element)    return jsonify({'code': 200, 'element': to_json(element)})# 元素删除@app.route('/element/delete', methods=['GET', 'POST'])def element_delete():    param = request.form    id = param.get('id')    scene_id = param.get('scene_id')    delete_element_tree(db, id=id, scene_id=scene_id)    return jsonify({'code': 200})# 元素开发树结构数据@app.route('/element/develop', methods=['GET', 'POST'])def element_develop():    param = request.form    scene_id = param.get('scene_id')    data = element_develop_data(db, scene_id=scene_id)    return jsonify({'code': 200, 'data': to_json(data)})# 元素头部查询@app.route('/element/header/select', methods=['GET', 'POST'])def element_header_select():    param = request.form    id = param.get('id')    data, count = get_element_header_data(db, id=id)    header = []    if data:        header = data[0].header    return jsonify({'code': 200, 'data': to_json(header)})# 元素头部保存@app.route('/element/header/save', methods=['GET', 'POST'])def element_header_save():    param = request.form    id = param.get('id')    header = param.get('header')    element_header = ElementHeader(id=id, header=header)    if element_header_exist(db, id=id):        update_element_header_data(db, data=element_header)    else:        insert_element_header_data(db, data=element_header)    return jsonify({'code': 200})# 元素参数查询@app.route('/element/param/select', methods=['GET', 'POST'])def element_param_select():    param = request.form    id = param.get('id')    data = element_param_data_select_deal(db, id=id)    return jsonify({'code': 200, 'data': to_json(data)})# 元素参数查询@app.route('/element/param/save', methods=['GET', 'POST'])def element_param_save():    param = request.form    id = param.get('id')    try:        data = json.loads(param.get('data'))    except:        return jsonify({'code': 0})    element_param_data_save_deal(db, id=id, data_lis=data)    return jsonify({'code': 200})# 3D图@app.route('/picture/3d', methods=['GET', 'POST'])def picture_3d():    data = element_param_data_select_deal(db, id='3ec3e62c1a6a4d9fac340c4df478b145')    data = eval(new_to_json(data))    print(data)    result = []    for d in range(80, 150, 2):        for transmission_power in np.arange(49, 55, 0.1):            # print(transmission_power)            p_sensor_theory = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", peakrate=0.0003, d=d, fc=data[0][8],                                   transmission_power=transmission_power, material='concrete')            result.append([d, round(transmission_power, 1), p_sensor_theory.get_actual_SINR()])    return jsonify(result)# 柱状图@app.route('/picture/bar', methods=['GET', 'POST'])def picture_bar():    data = element_param_data_select_deal(db, id='3ec3e62c1a6a4d9fac340c4df478b145')    data = eval(new_to_json(data))    theory_SINR = []  # 理论值    actual_SINR = []  # 实际值    # 传感器    p_sensor_theory = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", peakrate=0.0003)    theory_SINR.append(round(p_sensor_theory.get_theory_SINR(), 2))    p_sensor_actual = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=153, fc=data[0][8],                           transmission_power=float(data[0][13]),                           material='concrete')    actual_SINR.append(round(p_sensor_actual.get_actual_SINR(), 2))    # 监控    p_camera_theory = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", peakrate=80)    theory_SINR.append(round(p_camera_theory.get_theory_SINR(), 2))    p_camera_actual = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=78, fc=data[0][8],                           transmission_power=float(data[0][13]),                           material='concrete')    actual_SINR.append(round(p_camera_actual.get_actual_SINR(), 2))    # 手机    p_mobile_theory = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", peakrate=200)    theory_SINR.append(round(p_mobile_theory.get_theory_SINR(), 2))    p_mobile_actual = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=102, fc=data[0][8],                           transmission_power=float(data[0][13]),                           material='concrete')    actual_SINR.append(round(p_mobile_actual.get_actual_SINR(), 2))    # 无人机    p_uav_theory = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", peakrate=80)    theory_SINR.append(round(p_uav_theory.get_theory_SINR(), 2))    p_uav_actual = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=140, fc=data[0][8],                        transmission_power=float(data[0][13]), material='concrete')    actual_SINR.append(round(p_uav_actual.get_actual_SINR(), 2))    return jsonify({'code': 200, 'data': to_json({'theory_SINR': theory_SINR, 'actual_SINR': actual_SINR})})# 二维三条线x：d，y:sinr@app.route('/picture/sinr', methods=['GET', 'POST'])def picture_sinr():    data = element_param_data_select_deal(db, id='3ec3e62c1a6a4d9fac340c4df478b145')    data = eval(new_to_json(data))    print(data[0][9])    data_2_6 = []    data_3_5 = []    data_28 = []    data_d = []    for d in range(5, 150, 5):        p_sensor_actual_2_6 = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=d, fc='2.6',                                   transmission_power=float(data[0][13]),                                   material='concrete')        p_sensor_actual_3_5 = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=d, fc='3.5',                                   transmission_power=float(data[0][13]),                                   material='concrete')        p_sensor_actual_28 = RSRP(first=data[0][10], scs=data[0][9], symbol="7:3", d=d, fc='28',                                  transmission_power=float(data[0][13]),                                  material='concrete')        data_d.append(d)        data_2_6.append(p_sensor_actual_2_6.get_actual_SINR())        data_3_5.append(p_sensor_actual_3_5.get_actual_SINR())        data_28.append(p_sensor_actual_28.get_actual_SINR())    return jsonify({'code': 200, 'data': to_json(        {'data_d': data_d, 'data_2_6': data_2_6, 'data_3_5': data_3_5, 'data_28': data_28})})# 载波聚合@app.route('/picture/zaibo', methods=['GET', 'POST'])def picture_zaibo():    througthput = []    througthput1 = []    througthput2 = []    MU_MUMO = []    for MU_MUMO1 in range(1, 10, 1):        th = Throughput(J1=2, first="U", v_Layers1=2, MU_MUMO1=MU_MUMO1, Qm1=6, scs1="30", J2=2, v_Layers2=6,                        MU_MUMO2=MU_MUMO1, Qm2=6,                        scs2="60")        MU_MUMO.append(MU_MUMO1)        througthput1.append(round(th.get_througthput1(), 2))        througthput2.append(round(th.get_througthput2(), 2))        througthput.append(round(th.get_througthput2() + th.get_througthput1(), 2))    return jsonify({'code': 200, 'data': to_json(        {'througthput1': througthput1, 'MU_MUMO': MU_MUMO, 'througthput2': througthput2, 'througthput': througthput})})logger.info("{} 启动成功".format(datetime.datetime.now()))with app.app_context():    # picture_sinr()    picture_bar()    print(warning())